// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  
  
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id        String       @id @default(uuid())
  username       String
  password       String
  email          String       @unique
  created_at     DateTime     @default(now())
  name           String
  discord_handle String?
  role           Role  @default(FREELANCER)
  client         Client?
  freelancer     Freelancer?
}

model Client {
  c_id                String     @id @default(uuid())
  created_at          DateTime   @default(now())
  company_name        String     @unique
  company_description String?
  websiteLink         String?    @map("website/Link")
  total_jobs_posted   Int?
  total_amount_spent  Float?
  avg_rating          Float?
  user_id             String     @unique
  user                User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  jobs                Job[]
}

model Freelancer {
  f_id                String     @id @default(uuid())
  created_at          DateTime   @default(now())
  bio                 String
  skills              String
  portfolio_link      String
  social_link         String
  user_id             String     @unique
  user                User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  total_jobs_completed Int?
  total_earnings      Float?
  avg_rating          Float?
  jobs                Job[]
}

model Job {
  job_id        String       @id @default(uuid())
  created_at    DateTime     @default(now())
  description   String
  category      String
  freelancer_id String?      @map("freelancer_id")
  client_id     String?      @map("client_id")
  status        Status

  client        Client?      @relation(fields: [client_id], references: [c_id], onDelete: Cascade)
  freelancer    Freelancer?  @relation(fields: [freelancer_id], references: [f_id], onDelete: Cascade)
}

enum Role {
  FREELANCER
  CLIENT
  BOTH
}

enum Status {
  OPEN
  CLOSED
  COMPLETED
  INPROGRESS
}