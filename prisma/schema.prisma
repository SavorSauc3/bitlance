generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id        String      @id @default(uuid())
  username       String
  password       String
  email          String      @unique
  created_at     DateTime    @default(now())
  name           String
  role           Role        @default(FREELANCER)
  client         Client?
  freelancer     Freelancer?
}

model Client {
  c_id                String   @id @default(uuid())
  created_at          DateTime @default(now())
  company_name        String   @unique
  company_description String?
  websiteLink         String?  @map("website/Link")
  total_jobs_posted   Int?
  total_amount_spent  Float?
  avg_rating          Float?
  user_id             String   @unique
  user                User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  jobs                Job[]
  jobsFreelancers                 JobFreelancer[]
}

model Freelancer {
  f_id                 String   @id @default(uuid())
  created_at           DateTime @default(now())
  bio                  String
  skills               String
  portfolio_link       String
  social_link          String
  user_id              String   @unique
  total_jobs_completed Int?
  total_earnings       Float?
  avg_rating           Float?
  user                 User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  jobs                 Job[]
  jobsFreelancers                 JobFreelancer[]
}

model Job {
  job_id        String      @id @default(uuid())
  title         String 
  created_at    DateTime    @default(now())
  description   String
  category      Category
  client_address String
  freelancer_id String?     @map("freelancer_id")
  client_id     String      @map("client_id")
  price         Float?
  f_rating      Float?
  c_rating      Float?
  status        Status
  client        Client      @relation(fields: [client_id], references: [c_id], onDelete: Cascade)
  freelancer    Freelancer? @relation(fields: [freelancer_id], references: [f_id], onDelete: Cascade)
  freelancers   JobFreelancer[]
}

model JobFreelancer {
  id             String      @id @default(uuid())
  job_id         String
  client_id      String
  freelancer_id  String
  freelancer_address String
  
  job            Job         @relation(fields: [job_id], references: [job_id], onDelete: Cascade)
  freelancer     Freelancer  @relation(fields: [freelancer_id], references: [f_id], onDelete: Cascade)
  client            Client      @relation(fields: [client_id], references: [c_id], onDelete: Cascade)
  
  @@unique([job_id, freelancer_id])
}
enum Role {
  FREELANCER
  CLIENT
  BOTH
}

enum Status {
  OPEN
  CLOSED
  COMPLETED
  INPROGRESS
}

enum Category {
  DESIGN
  MUSIC
  PROGRAMMING
  DIGITAL_MARKETING
  VIDEO
  WRITING
  TRANSLATION
  BUSINESS
  CONSULTING
  AI
  GAMING 
  OTHER 
 }